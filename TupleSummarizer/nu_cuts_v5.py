
# Import stuff
from ROOT import TH1F
from ROOT import TCanvas
from ROOT import gPad
from ROOT import gROOT
from ROOT import *
import sys
import ROOT
import os
DEBUG = False
data = True
maxlen = 4
# version 4 switch to TChain from file

# this program reads in a tuple, applies cuts and produces histograms for every variable in the tuple.
# it autocalculates the range using root's algorithm but outputs the ranges so you can use them for consistency or modify them

# arguments are:

# 1 name of list of input root files

# 2 optional - name of txt file (generated by previous run) with fixed ranges for variables.

if len(sys.argv) < 2:
  print (" arguments are ")
  print (" python nu_cuts_v4.py <input list of root files> [<input limits file>]")
  print (" if no limits file is specified I will make one")
  sys.exit(0)

variables = ["CCQENu_leptonE", "CCQENu_minos_trk_p", "CCQENu_minos_trk_qp", "CCQENu_nuHelicity", "dis_id_energy"]
# map of tags for cuts you might wish to apply

# units are MeV and radians
cuts = {"physical":"CCQENu_E<120000","antinu":"CCQENu_nuHelicity==2"}   # can implement sets of cuts here
#"recoilEnergy":"recoil_energy_nonmuon_nonvtx100mm<500.",
#"sanity":"abs(CCQENu_minos_trk_p)<120000&&muon_minerva_trk_chi2PerDoF>0",
#"antinu":"CCQENu_nuHelicity==2",
#"muonTheta":"muon_theta<0.4",
#"physical":"CCQENu_E<120000",
#"highpt":"CCQENu_muon_P*sin(muon_theta)>1000",
#"strangeP":"CCQENu_muon_E/mc_primFSLepton[3]>2",
#"goodmu":"CCQENu_minos_trk_eqp_qp<0.4"
#}

# here you choose what cuts you actually wish to apply for this run.

cutchoice = ["physical","antinu"] # can enable sets of cuts here

# Open the input file

inputlist = open(sys.argv[1],'r').readlines()

thechain = TChain("CCQENu")  # root -l file.root ; TBrowser b; # would show you this.
for line in inputlist:
  inputfile = line.strip()
  thechain.Add(inputfile)

if (DEBUG):
  thechain.Print()

TH = "TH1F"

print ("read in file ",sys.argv[1])

# read in limits from previous run if it is available as the second argument

minimum = {}
maximum = {}
haslim = False
if len(sys.argv) > 2:
  limfilename = sys.argv[2]
  limitfile = open(limfilename,'r')
  haslim = True
  liminput = limitfile.readlines()
  for line in liminput:
    vals = line.split(" ")
    print (vals)
    minimum[vals[0]]=float(vals[1])
    maximum[vals[0]]=float(vals[2])

# set up cuts from the choice you made above

thecut = ""
tag = ""
for cut in cutchoice:
  thecut += cuts[cut] + " && "
  tag +=cut+"_"
tag = tag[0:-1]
thecut = thecut[0:-3]

print ("the cuts are", tag, thecut)

outname = sys.argv[1].replace(".txt","")
outname = os.path.basename(outname)

# if you used a limits file, include that in the output filename

if haslim:
  outname = outname+"_"+tag+"_"+ os.path.basename(sys.argv[2]).replace(".txt","")
else:
  outname = outname+"_"+tag

# Figure out what is in your file

#for key in thechain.GetListOfKeys():
#    ntuple = thechain.Get(key.GetName())
#    print "this file has ",ntuple

# this makes a version with the cuts applied

cutoutname = "cut_"+outname
outfile = TFile(cutoutname+".root",'RECREATE')

# now loop over all the tuples you want to study

tuplename = thechain.GetName()

# inntuple = thechain.Get(tuplename)
inntuple = thechain
if "TChain" not in str(type(inntuple)):
    print (" no TChain in ",tuplename)
    sys.exit(1)
if cuts != []:
  print ("building a smaller tuple with cuts ", thecut)
  ntuple = inntuple.CopyTree(thecut)
else:
  ntuple = thecut

# make a summary of the actual ranges used
rangesname="ranges_"+outname
listing = open(rangesname+"_"+tuplename+".txt",'w')

# make the output histograms
histoutname = "hist_"+outname
hout = ROOT.TFile(histoutname+"_"+tuplename+".root","RECREATE")
ROOT.gROOT.SetBatch(True)  # Supresses the drawing canvas
count = 0

# loop over all the variables in the tuple
#print (ntuple.GetListOfBranches())

print(variables)

for i in ntuple.GetListOfBranches():
  if DEBUG and count > 100:
    break
  count = count + 1

# figure out if the branch is a variable or an array of variables
  if DEBUG:
      print ("before try", i.GetName())
  if (count > -1):
    len = ntuple.GetLeaf(i.GetName()).GetLen()
    branch = i.GetName()
    if not (branch in variables or branch.replace("_sz", "") in variables):
      continue
    if DEBUG:
      print (branch)
    htemp = 0
    if data and "truth" in branch:
      continue

# if it is a variable, just histogram it.  Ditto if it is huge, then just glom em all together as one.

    if len == 1 or len > maxlen:
        mini = 0.0
        maxa = 0.0
        if "sz" in branch:
          continue
        # this is some serious root voodoo - use interactive root itself to make a trial histogram to get the ranges into a temporary histogram
        if not haslim:
          ntuple.Draw(branch, branch + " != - 9999 && "+branch+" != - 999")
          htemp = gPad.GetPrimitive("htemp")
          if TH not in str(type(htemp)):
            
            continue
        
          mini = htemp.GetBinLowEdge(1)
          maxa = htemp.GetBinLowEdge(htemp.GetNbinsX()+1)
          htemp.Delete()

# here if you already had limits set and did not use the root voodoo

        if haslim and branch in  minimum:
          
          mini = minimum[branch]
          maxa = maximum[branch]

# now make a histogram with the right range

        htemp = TH1F("htemp",branch,40,mini,maxa)
        htemp.Sumw2()
        text = "%s %g %g %d\n"%(branch,mini,maxa,len)
        listing.write(text)
        if mini == maxa:
            continue
        cut = branch + " >= " + str(mini) + " && " + branch + " <= " + str(maxa)

# and fill it

        ntuple.Draw(branch+">>htemp",cut)
        #print (cut)

# and clone it to a real one - this really is voodoo

        real = gPad.GetPrimitive("htemp").Clone()

        if TH not in str(type(real)):
          print (" could not do ",branch)
          continue
        real.SetName(branch)
        real.SetTitle(branch+";"+branch)
        real.Write()
        htemp.Delete()
    else:
      
      # skip the size branches
        if "_sz" in branch:
          continue
    # here if it is a vector - same as the previous
    
        for j in range(0,len):
            nubranch = "%s[%d]"%(branch,j)
            branchname = "%s_%d"%(branch,j)
            mini = 0.0
            maxa = 0.0
            if not haslim:
              ntuple.Draw(nubranch, nubranch + " != -9999 && "+nubranch+" != - 999")
              htemp = gPad.GetPrimitive("htemp")
              if TH not in str(type(htemp)):
                  continue
            
              mini = htemp.GetBinLowEdge(1)
              maxa = htemp.GetBinLowEdge(htemp.GetNbinsX()+1)
              htemp.Delete()
            if haslim and branchname in minimum:
              #print ("vector", mini,minimum[branchname])
              mini = minimum[branchname]
              maxa = maximum[branchname]
           
            htemp = TH1F("htemp",nubranch,40,mini,maxa)
            htemp.Sumw2()
            text = "%s %g %g %d\n"%(branchname,mini,maxa,len)
            if DEBUG:
              htemp.Print()
            listing.write(text)
            if mini == maxa:
                continue
            cut = nubranch + " >= " + str(mini) + " && " + nubranch + " <= " + str(maxa)
            ntuple.Draw(nubranch+">>htemp",cut) # loops over all events and histograms them.
            #print (cut)
            real = gPad.GetPrimitive("htemp").Clone()
            if TH not in str(type(real)):
                print (" could not do ",branch)
                continue
            htemp.Delete()
            real.SetName(branchname)
            real.SetTitle(branchname+";"+branchname)
            real.Write()
  #except:
  #  print (" this key failed", i.GetName())
  #  sys.exit(0)
hout.Close()
listing.close()
outfile.cd()
ntuple.Write()
outfile.Close()

